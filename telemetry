package main

import (
    "io"
    "log"
    "net"
    "os"
    "runtime"
    "sync"

    "github.com/joho/godotenv"
    "google.golang.org/grpc"

    "telemetry_service/proto"
)

const (
    grpcPort    = ":50051"
    metricsAddr = ":9090"
)

type server struct {
    proto.UnimplementedTelemetryServiceServer
}

// StreamEvents handles a client-stream of TelemetryEvent messages
func (s *server) StreamEvents(stream proto.TelemetryService_StreamEventsServer) error {
    eventChan := make(chan *proto.TelemetryEvent, 10000)
    var wg sync.WaitGroup

    // Start worker pool for concurrent processing
    workerCount := runtime.NumCPU() * 2
    for i := 0; i < workerCount; i++ {
        wg.Add(1)
        go func() {
            defer wg.Done()
            for ev := range eventChan {
                // Pseudonymize the user ID
                _ = Pseudonymize(ev.UserId)
                // Increment Prometheus counter
                ProcessedEvents.Inc()
            }
        }()
    }

    var count uint64
    for {
        ev, err := stream.Recv()
        if err == io.EOF {
            break
        }
        if err != nil {
            return err
        }
        eventChan <- ev
        count++
    }
    close(eventChan)
    wg.Wait()

    // Respond with total processed
    return stream.SendAndClose(&proto.TelemetryAck{ProcessedEvents: count})
}

func main() {
    // Load .env (SALT)
    if err := godotenv.Load(); err != nil {
        log.Println("No .env file found; ensure SALT is set in environment")
    }

    // Start Prometheus metrics endpoint
    startMetricsServer(metricsAddr)

    // Start gRPC server
    lis, err := net.Listen("tcp", grpcPort)
    if err != nil {
        log.Fatalf("failed to listen: %v", err)
    }
    grpcServer := grpc.NewServer()
    proto.RegisterTelemetryServiceServer(grpcServer, &server{})

    log.Printf("gRPC server listening on %s", grpcPort)
    if err := grpcServer.Serve(lis); err != nil {
        log.Fatalf("failed to serve: %v", err)
    }
}
